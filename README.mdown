HyperiOS AVR Bootloader
========

This is AVR MCU boot-loader for Mostat project (AVR MCU firmware you can find [here](http://github.com/aliengreen/hyperios-mostat)). The bootloader is just a normal AVR MCU application that is located in a special region of flash memory. 

For getting firmware into the AVR MCU we using primary CPU ESP8266 SPI flash through UART, you need special firmware in ESP8266 in order to update AVR MCU. We implemented a simple custom protocol to upload firmware from ESP8266 UART protocol.

> Note: The bootloader can't update itself and applications almost never modify the bootloader, you will need an external programmer STK500, AVRISP to write the bootloader to the MCU.


Before you upload bootloader always better to set the BOOTRST fuse to run the bootloader after reset. Also bootloader boot size in AVR FUSES should be 2048 words same as 4096 Bytes. The UART interface uses 8-bit data words with no parity and 1 stop bit at 19200 baud rate.


## How it works

After device reset or first start the bootloader transmits `FCHK=1<CR>` command in UART channel.
If first received character is colon punctuation `:` character followed by 2 byte [CRC16-CCITT](http://automationwiki.com/index.php/CRC-16-CCITT) checksum the device enter in programing mode. If no input is received within 8 seconds or it received colon punctuation `:` with zero checksum then the device not enter programming mode and resumes normal operation.

> Note: The firmware starts immediately if received colon punctuation `:` with zero checksum.


## Configuration

Before you start, make sure you have the configuration



### build.xml

For build script we use standard ant build file `build.xml`. There are 2 file for Mostat REVA board with filename `build-old-reva.xml` and REVB with filename `build-new-revb.xml`.

In this files you can configure 9 parameters: MCU family, crystal frequency, baudrate, avrdude bitclock, bootloader section start address, board revision, and low,high,extended FUSE bits of AVR MCU.

    <property name="mcu" value="atmega328p"/>
    <property name="f_cpu" value="8000000UL"/>
    <property name="f_baudrate" value="19200"/>
    <property name="avrdude_bitclock" value="3"/>
    <property name="sectionstart" value="0x7000"/>
    <property name="board_rev" value="B"/>

    <!-- External Crystal 8Mhz -->
    <property name="l" value="0xfd"/>
    <property name="h" value="0xd0"/>
    <property name="e" value="0xfd"/>

- `mcu` property value can be `atmega328p` or `atmega1284p`
- `f_cpu` property crystal frequency in Herz. e.g. 8Mhz crystal will be `8000000UL`
- `f_baudrate` property UART baud rate. It should be 19200, if you change this value you also need to change in other side ESP8266 firmware.
- `avrdude_bitclock` avrdude programing speed.
- `sectionstart` property value boot flash section start address. We use 4kb bootloader size, for atmega328P this value will be `0x7000`
- `board_rev` property can be one of the value 'A' or 'B' it depends on board revision.
- `l`,`h`,`e` properties is a AVR FUSES.
 
> In most cases you don't need to change default baud rate `BAUDRATE   19200`, but make sure to configure your ESP8266 WI-FI module for `19200` baud rate in order to work correctly. You also need special firmware loaded in ESP8266.


## Build

- `ant -f build-old-reva.xml all` -  build all source files in `src` directory and store compiled files in `bin` and `o` directories for old revision A
- `ant -f build-new-revb.xml all` -  build all source files in `src` directory and store compiled files in `bin` and `o` directories for new revision B
* `ant -f build-*.xml up` - upload `bootloader_*.hex` in connected device
* `ant -f build-*.xml clean` - clean up everything (remove `bin` and `o` directories)
* `ant -f build-*.xml size` - Get binary .elf file size information
* `ant -f build-*.xml size-o` - Get all object file information from ./o/ directory
* `ant -f build-*.xml fuses-r` - read AVR fuses from connected device

Also, you can update AVR fuses by the following ant task:

`ant -f build-*.xml fuses-w -Dl='0xfd' -Dh='0xd0' -De='0xfd'`

fields show the actual hexadecimal representation of fuses, These are the values you have to program into your AVR device. Where:

- `-Dl` is a LOW fuse in hexadecimal
- `-Dh` is HIGH fuse in hexadecimal
- `-De` is EXT fuse in hexadecimal

> Note: Make sure to set the BOOTRST fuse bit to run the bootloader first after reset.

For more information about FUSES calculator and actual values see [Engbedded Atmel AVR® Fuse Calculator](http://www.engbedded.com/fusecalc/)


## Upload 

For programming AVR micro-controllers you need AVR programmer STK500 or similar, next you will use the `avrdude` software to upload binary `.hex` file to the chip.

Under MacOS X, we can use the Terminal program to pull up a command line interface. 

First get your AVR target board ready to go. Connect your board to the USB programmer and run:

`ant -f build-*.xml all up` 

If all goes well, you should see similar output:
	
	Buildfile: /Users/..../MyProjects/hyperios-os/build.xml
	
	up:
	     [echo] Upload to '/dev/cu.usbmodem14511' device MCU family 'atmega328p' clock '8000000UL'


## Merge two HEX files

I'm 100% sure you are building application and bootloader separately. So you will end up with two .hex files and you will get them both onto the AVR. Here is how to merge the `firmware.hex` and `bootloader.hex` into a single file `application.hex`

If you don't have `brew` installed download and install from [http://www.brew.sh](). Next install `srecord` with `brew`

`> brew install srecord`

Next we are going to use `srec_cat` CLI:

`> srec_cat bootloader_*.hex -Intel firmware.hex -Intel -o application.hex -Intel -address-length=2 -Output_Block_Size=16`

Done.


Resources
-----------

- [Engbedded Atmel AVR® Fuse Calculator](http://www.engbedded.com/fusecalc/)

